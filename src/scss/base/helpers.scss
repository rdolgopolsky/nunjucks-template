// list reset
%listreset {
	margin: 0;
	padding: 0;
	list-style: none;
}

// clearfix
%clearfix {
	&:after {
		content: '';
		display: block;
		clear: both;
	}
}

/// * Helper class to truncate and add ellipsis to a string too long for it to fit
/// * on a single line.
/// * 1. Prevent content from wrapping, forcing it on a single line.
/// * 2. Add ellipsis at the end of the line.

%ellipsis {
	white-space: nowrap; /* 1 */
	text-overflow: ellipsis; /* 2 */
	overflow: hidden;
}

/// Hides the text in an element, commonly used to show an image. Some elements will need block-level styles applied.
///
/// @link http://zeldman.com/2012/03/01/replacing-the-9999px-hack-new-image-replacement

%hide-text {
	overflow: hidden;
	text-indent: 101%;
	white-space: nowrap;
}

// stretch img with fix to chrome
%bg-stretch-img {
	width: 100%;
	max-width: none;
	height: 100%;
	object-fit: cover;
	position: absolute;
	left: 50%;
	top: 50%;
	transform: translate(-50%, -50%);
}


$sides: (top, bottom, left, right);

@for $i from 0 through 50 {
	@each $side in $sides {
		._m#{str-slice($side, 0, 1)}-#{$i} {
			margin-#{$side}: #{$i}rem !important;
		}
		._p#{str-slice($side, 0, 1)}-#{$i} {
			padding-#{$side}: #{$i}rem !important;
		}
	}

	._py-#{$i} {
		padding-top: #{$i}rem !important;
		padding-bottom: #{$i}rem !important;
	}

	._px-#{$i} {
		padding-left: #{$i}rem !important;
		padding-right: #{$i}rem !important;
	}
}

@for $i from 0 through 50 {
	@each $side in $sides {
		@include media(">=tablet") {
			._m#{str-slice($side, 0, 1)}-md-#{$i} {
				margin-#{$side}: #{$i}rem !important;
			}

			._p#{str-slice($side, 0, 1)}-md-#{$i} {
				padding-#{$side}: #{$i}rem !important;
			}

			._py-md-#{$i} {
				padding-top: #{$i}rem !important;
				padding-bottom: #{$i}rem !important;
			}

			._px-md-#{$i} {
				padding-left: #{$i}rem !important;
				padding-right: #{$i}rem !important;
			}
		}
	}
}

@for $i from 0 through 50 {
	@each $side in $sides {
		@include media(">=desktop-md") {
			._m#{str-slice($side, 0, 1)}-lg-#{$i} {
				margin-#{$side}: #{$i}rem !important;
			}

			._p#{str-slice($side, 0, 1)}-lg-#{$i} {
				padding-#{$side}: #{$i}rem !important;
			}

			._py-lg-#{$i} {
				padding-top: #{$i}rem !important;
				padding-bottom: #{$i}rem !important;
			}

			._px-lg-#{$i} {
				padding-left: #{$i}rem !important;
				padding-right: #{$i}rem !important;
			}
		}
	}
}

$base-color: #036;
@for $i from 1 through 3 {
	ul li:nth-child(3n + #{$i}) {
		// background-color: lighten($base-color, $i * 5%);
	}
}
